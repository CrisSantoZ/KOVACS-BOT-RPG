// bot_baileys.js

const {
    default: makeWASocket,
    useMultiFileAuthState,
    DisconnectReason,
    Browsers,
    fetchLatestBaileysVersion // Para buscar a vers√£o mais recente do Baileys
} = require('@whiskeysockets/baileys');
const P = require('pino'); // Logger usado pelo Baileys
const qrcode = require('qrcode-terminal'); // Para exibir QR code como fallback
const readline = require('readline'); // Para ler input do usu√°rio (n√∫mero de telefone)

// Fun√ß√£o para perguntar o n√∫mero de telefone ao usu√°rio no terminal
const askForPhoneNumber = (query) => {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    return new Promise(resolve => rl.question(query, ans => {
        rl.close();
        resolve(ans.trim()); // Remove espa√ßos extras
    }));
};

async function connectToWhatsApp() {
    console.log('Iniciando conex√£o com Baileys...');

    // useMultiFileAuthState salva os dados da sess√£o em uma pasta (ex: 'auth_info_baileys')
    // para que voc√™ n√£o precise se autenticar toda vez.
    const { state, saveCreds } = await useMultiFileAuthState('auth_info_baileys');

    // Busca a vers√£o mais recente do Baileys para melhor compatibilidade
    const { version, isLatest } = await fetchLatestBaileysVersion();
    console.log(`Usando Baileys v${version.join('.')}, √© a mais recente: ${isLatest}`);

    const sock = makeWASocket({
        version, // Usa a vers√£o mais recente do WhatsApp Web
        logger: P({ level: 'silent' }), // N√≠vel de log: 'trace', 'debug', 'info', 'warn', 'error', 'fatal' ou 'silent'
        printQRInTerminal: true, // Por padr√£o, permite imprimir QR no terminal (como fallback)
        browser: Browsers.macOS('Desktop'), // Simula um navegador de Desktop (ex: Chrome no macOS)
        auth: state, // Passa o estado da autentica√ß√£o (sess√£o salva)
        generateHighQualityLinkPreview: true, // Gera pr√©-visualiza√ß√µes de links de alta qualidade
    });

    // L√≥gica para pareamento com c√≥digo se n√£o houver sess√£o salva
    // sock.ev.on('connection.update', async (update) => { ... }) √© onde o QR tamb√©m √© tratado.
    // Tentaremos obter o c√≥digo de pareamento ANTES do loop de eventos se n√£o houver 'me' (dados do usu√°rio)
    if (!sock.authState.creds.me && !sock.authState.creds.registered) {
        console.log('Nenhuma sess√£o encontrada. Vamos tentar o pareamento com c√≥digo.');
        const phoneNumber = await askForPhoneNumber('Digite seu n√∫mero de WhatsApp no formato internacional (ex: 55119XXXXXXXX): ');

        if (phoneNumber && /^\d+$/.test(phoneNumber.replace(/[+()\s-]/g, ''))) { // Valida√ß√£o b√°sica
            console.log(`Solicitando c√≥digo de pareamento para o n√∫mero: ${phoneNumber}...`);
            try {
                // Suprime a impress√£o de QR temporariamente se estivermos tentando o c√≥digo
                sock.ws.config.printQRInTerminal = false;
                const code = await sock.requestPairingCode(phoneNumber.replace(/[+()\s-]/g, '')); // Remove caracteres n√£o num√©ricos
                console.log('***********************************************************************');
                console.log(`   Seu C√ìDIGO DE PAREAMENTO √©: ${code}   `);
                console.log('   Instru√ß√µes:');
                console.log('   1. No seu WhatsApp (neste celular), v√° em: Menu (tr√™s pontinhos ou Configura√ß√µes) > Aparelhos Conectados.');
                console.log('   2. Toque em "Conectar um aparelho".');
                console.log('   3. Escolha a op√ß√£o "Conectar com n√∫mero de telefone em vez disso".');
                console.log('   4. Digite o c√≥digo acima no seu WhatsApp.');
                console.log('***********************************************************************');
            } catch (error) {
                console.error('Falha ao solicitar c√≥digo de pareamento. O bot pode tentar usar QR Code.', error);
                // Se falhar, reabilita a impress√£o de QR para o evento 'connection.update'
                sock.ws.config.printQRInTerminal = true;
            }
        } else {
            console.log('N√∫mero de telefone inv√°lido ou n√£o fornecido. O bot pode tentar usar QR Code.');
            sock.ws.config.printQRInTerminal = true; // Garante que o QR ser√° impresso se n√£o houver n√∫mero
        }
    }

    // Manipulador de eventos da conex√£o
    sock.ev.on('connection.update', async (update) => {
        const { connection, lastDisconnect, qr } = update;

        if (qr && sock.ws.config.printQRInTerminal) {
            console.log('--------------------------------------------------------------------------------');
            console.log('QR CODE RECEBIDO (Baileys)! Escaneie com seu WhatsApp.');
            qrcode.generate(qr, { small: true });
            console.log('Se um c√≥digo de pareamento foi exibido antes, use-o preferencialmente.');
            console.log('--------------------------------------------------------------------------------');
        }

        if (connection === 'close') {
            const statusCode = lastDisconnect?.error?.output?.statusCode;
            const shouldReconnect = statusCode !== DisconnectReason.loggedOut;
            console.log(`Conex√£o fechada! Status: ${statusCode}, Erro: ${lastDisconnect?.error}, Reconectar: ${shouldReconnect}`);
            if (shouldReconnect) {
                console.log("Tentando reconectar...");
                connectToWhatsApp(); // Tenta reconectar
            } else {
                console.log("Desconectado permanentemente (loggedOut). Delete a pasta 'auth_info_baileys' e reinicie para tentar um novo login.");
            }
        } else if (connection === 'open') {
            console.log('*********************************************');
            console.log('CONECTADO COM SUCESSO ao WhatsApp (Baileys)!');
            console.log('Bot de RPG Harry Potter (Baileys) est√° online.');
            console.log('*********************************************');
            // console.log('Meus dados de login:', sock.authState.creds.me); // Mostra seus dados de login
        }
    });

    // Salva as credenciais (sess√£o) sempre que forem atualizadas
    sock.ev.on('creds.update', saveCreds);

    // Manipulador de novas mensagens
    sock.ev.on('messages.upsert', async (m) => {
        const msg = m.messages[0];
        if (!msg.key.fromMe && m.type === 'notify') { // Ignora mensagens pr√≥prias e notifica√ß√µes de status
            const sender = msg.key.remoteJid; // Quem enviou (ex: 55DDDNUMERO@s.whatsapp.net)
            const messageText = msg.message?.conversation || msg.message?.extendedTextMessage?.text || "";

            if (messageText) { // Processa apenas se houver texto
                console.log(`[${sender?.split('@')[0]}]: ${messageText}`);

                // Comando de teste
                if (messageText.toLowerCase() === '!ping baileys') {
                    await sock.sendMessage(sender, { text: 'Pong! (Baileys) üßô‚Äç‚ôÇÔ∏è' });
                    console.log(`Respondido para ${sender?.split('@')[0]} com Pong!`);
                }

                // --- AQUI ENTRAR√Å A L√ìGICA DO SEU RPG ---
                // Ex: if (messageText.startsWith('!criarpersonagem')) { /* ... */ }
            }
        }
    });
}

// Inicia a conex√£o
connectToWhatsApp().catch(err => {
    console.error("ERRO INESPERADO AO INICIAR A CONEX√ÉO COM BAILEYS:", err);
});
